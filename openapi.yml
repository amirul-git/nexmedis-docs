openapi: "3.0.2"
info:
  title: Nexmedis Social OpenAPI
  version: "1.0"
servers:
  - url: https://localhost:8000/api
paths:
  /user/posts:
    get:
      tags:
        - "user"
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 200
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          caption:
                            type: string
                            example: "good works"
                          photo:
                            type: string
                            example: "photos/123"
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: "amir"
                              email:
                                type: string
                                example: "amir@mail.com"
                          comments:
                            type: array
                            items:
                              type: object
                              properties:
                                text:
                                  type: string
                                  example: "Keren banget"
                                user:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                      example: 1
                                    name:
                                      type: string
                                      example: "amir"
                                created_at:
                                  type: string
                                  example: "2024-01-27"
                          likes:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                user:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: "amir"
                          created_at:
                            type: string
                            example: "27 Jan 2024"
                    message:
                      type: string
                      example: "Post displayed"
  /posts:
    get:
      tags:
        - "posts"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    status:
                      type: integer
                      example: 200
                    data:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          caption:
                            type: string
                            example: "good works"
                          photo:
                            type: string
                            example: "photos/123"
                          user:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: "amir"
                              email:
                                type: string
                                example: "amir@mail.com"
                          comments:
                            type: array
                            items:
                              type: object
                              properties:
                                text:
                                  type: string
                                  example: "Keren banget"
                                user:
                                  type: object
                                  properties:
                                    id:
                                      type: string
                                      example: 1
                                    name:
                                      type: string
                                      example: "amir"
                                created_at:
                                  type: string
                                  example: "2024-01-27"
                          likes:
                            type: array
                            items:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                user:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 1
                                    name:
                                      type: string
                                      example: "amir"
                          created_at:
                            type: string
                            example: "27 Jan 2024"
                    message:
                      type: string
                      example: "Post displayed"
    post:
      tags:
        - "posts"
      security:
        - bearerAuth: []
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                caption:
                  type: string
                  example: "good word"
                photo:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: 200
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      caption:
                        type: string
                        example: "good word"
                      photo:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "amir"
                          email:
                            type: string
                            example: "amir@mail.com"
                  message:
                    type: string
                    example: "Post created"
  /posts/{postId}:
    get:
      tags:
        - "posts"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          example: 1
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      caption:
                        type: string
                        example: "words"
                      photo:
                        type: string
                        example: "photos/l9F2d5tVbageVz6AdRoAhnjDvYvqVamMaiPyWfoX.jpg"
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "amir"
                          email:
                            type: string
                            example: "amir@mail.com"
                  message:
                    type: string
                    example: "Post displayed"
    put:
      tags:
        - "posts"
      security:
        - bearerAuth: []
      description: Use method `post` intead of `put` in Laravel ~ it's Laravel convention.
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          example: 1
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                _method:
                  type: string
                  description: omit when not in laravel
                  example: "put"
                caption:
                  type: string
                  example: "words"
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 204
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      caption:
                        type: string
                        example: "words"
                      photo:
                        type: string
                        example: "photos/KjYYfam7Jlh7d5VinjJflZxsnSf0mVGHNcjUpBqU.jpg"
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "amir"
                          email:
                            type: string
                            example: "amir@mail.com"
                  message:
                    type: string
                    example: "Post updated"
    delete:
      tags:
        - "posts"
      security:
        - bearerAuth: []
      description: Use method `post` intead of `delete` in Laravel ~ it's Laravel convention.
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          example: 1
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                _method:
                  type: string
                  description: omit this when not in Laravel
                  example: "delete"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status::
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      caption:
                        type: string
                        example: "words"
                      photo:
                        type: string
                        example: "photos/KjYYfam7Jlh7d5VinjJflZxsnSf0mVGHNcjUpBqU.jpg"
                      user:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "amir"
                          email:
                            type: string
                            example: "amir@mail.com"
                  message:
                    type: string
                    example: "Post deleted"
  /login:
    post:
      tags:
        - "user"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "amir@mail.com"
                password:
                  type: string
                  example: "password"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: "amir@mail.com"
                      token:
                        type: string
                        example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6MSwibmFtZSI6ImFtaXIiLCJlbWFpbCI6ImFtaXJAbWFpbC5jb20ifQ.h6v2zSCJZeB1uWTvSriJjKE3IK3ZJI-wDmIhjtpjMTM"
                  message:
                    type: string
                    example: "User login"
  /register:
    post:
      tags:
        - "user"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "amir"
                email:
                  type: string
                  example: "amir@mail.com"
                password:
                  type: string
                  example: "$2y$12$dWAIsCV4T/Wnvr6.lDCYGu5OjaKMpf5vhNkBLlW83V3ePSvRz5MTy"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: "amir"
                      email:
                        type: string
                        example: "amir@mail.com"
                      password:
                        type: string
                        example: "password"
                  message:
                    type: string
                    example: "User created"
  /posts/{postId}/comments:
    post:
      tags:
        - "comment"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          example: 1
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                text:
                  type: string
                  example: "Hello comment"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: 13
                        text:
                          type: string
                          example: "Hello comment"
                        user_id:
                          type: integer
                          example: 1
                        post_id:
                          type: integer
                          example: 1
                        updated_at:
                          type: string
                          example: "2024-01-27"
                        created_at:
                          type: string
                          example: "2024-01-27"
                  message:
                    type: string
                    example: "Comment created"
  /posts/{postId}/likes:
    post:
      tags:
        - "like"
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: postId
          schema:
            type: integer
          required: true
          example: 1
        - in: header
          name: Authorization
          schema:
            type: string
          required: true
          description: JWT Token required in header
          example: "Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NSwibmFtZSI6ImludGFuIiwiZW1haWwiOiJpbnRhbkBtYWlsLmNvbSJ9.rJ9dZ3mUTskN1R-QVk1bRIKjJ8Jy1lOB_cd3EX3Co3A"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        post_id:
                          type: integer
                          example: 1
                        user_id:
                          type: integer
                          example: 1
                        updated_at:
                          type: string
                          example: "2024-01-27"
                        created_at:
                          type: string
                          example: "2024-01-27"
                  message:
                    type: string
                    example: "Like created"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
